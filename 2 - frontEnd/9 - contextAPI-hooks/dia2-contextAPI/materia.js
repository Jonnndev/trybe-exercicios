// CONTEXT

//O Context fornece um meio de passar dados por meio da √°rvore de componentes, sem a necessidade de passar props manualmente em cada n√≠vel.

// ================ Criar Context ================ //

// Para isso, utilizamos a fun√ß√£o createContext do React.

// /src/context/ThemeContext.js
import React, { createContext } from 'react';

const ThemeContext = createContext();

export default ThemeContext;

// O createContext retorna um objeto que possui dois componentes como propriedades: Provider e Consumer.

// Provider √© respons√°vel por ‚Äúprover‚Äù os dados para os componentes que est√£o nos n√≠veis abaixo dele na √°rvore de componentes. Ele aceita uma prop obrigat√≥ria value com os dados que ser√£o compartilhados para todos os componentes abaixo dele. Esse valor pode ser qualquer valor JavaScript, como um n√∫mero, string, array ou objeto.

// Consumer √© respons√°vel por ‚Äúconsumir‚Äù os valores armazenados no Context. Tamb√©m √© poss√≠vel consumir os dados de um Context usando o Hook useContext, dessa forma n√£o √© obrigat√≥rio o uso do Consumer.

// /src/App.js

import ThemeContext from './context/ThemeContext';
// ...

export default function App() {
  return (
    <ThemeContext.Provider value={{ color: 'dark' }}>
      <div>
        <Header />
        <Image />
        <Footer />
      </div>
    </ThemeContext.Provider>
  );
}

// ================ Lendo Context ================ //

// /src/components/Footer.js
import React, { useContext } from 'react';
import ThemeContext from '../context/ThemeContext';

function Footer() {
  const theme = useContext(ThemeContext);
  return (
    <footer>Tema Atual: {theme.color}</footer>);
}

export default Footer;

// ================ Escrevendo Context ================ //

// /src/App.js
import React, { useState } from 'react';
import ThemeContext from './context/ThemeContext';

export default function App() {
  const [themeColor, setThemeColor] = useState('dark');

  // ...
}

// No c√≥digo acima estamos criando um estado com o Hook useState, passando dark como valor inicial. Agora precisamos informar ao Provider que a chave color dever√° receber o valor do estado themeColor:

// /src/App.js

// ...

// /src/App.js

import ThemeContext from './context/ThemeContext';
// ...

export default function App() {
  const [themeColor, setThemeColor] = useState('dark');

  return (
    <ThemeContext.Provider value={{ color: themeColor }}>
      <div>
        <Header />
        <Image />
        <Footer />
      </div>
    </ThemeContext.Provider>
  );
}

// Agora, vamos criar uma fun√ß√£o que altere o valor do estado themeColor de dark para light e vice-versa. Depois, tamb√©m adicionaremos essa fun√ß√£o ao nosso Provider para que qualquer componente possa invoc√°-la:

export default function App() {
  const [themeColor, setThemeColor] = useState('dark');

  function toggleTheme() {
    setThemeColor(themeColor === 'dark' ? 'light' : 'dark');
  }

  return (
    <ThemeContext.Provider value={{ color: themeColor, toggleTheme }}>
      <div>
        <Header />
        <Image />
        <Footer />
      </div>
    </ThemeContext.Provider>
  );
}

// ================ Finalizando Context ================ //

import React, { useContext } from 'react';
import ThemeContext from '../context/ThemeContext';

function Header() {
  const theme = useContext(ThemeContext);

  return (
    <header>
      <h1>Trybe</h1>
      <button onClick={() => theme.toggleTheme()}>
        {theme.color === 'dark' ? '‚òÄÔ∏è' : 'üåí'}
      </button>
    </header>
  );
}

export default Header;

// ================ PROVIDER PATTERN ================ //

// Esse padr√£o nada mais √© que extrair o Provider, bem como os dados e a l√≥gica, para um componente pr√≥prio. 

// /src/context/ThemeProvider.js

import React, { useState } from 'react';
import ThemeContext from './ThemeContext';

export default function ThemeProvider({ children }) {
  const [themeColor, setThemeColor] = useState('dark');

  function toggleTheme() {
    setThemeColor(themeColor === 'dark' ? 'light' : 'dark');
  }

  return (
    <ThemeContext.Provider value={{ color: themeColor, toggleTheme }}>
      <div className={themeColor}>
        {children}
      </div>
    </ThemeContext.Provider>
  );
}

// Veja como agora o componente App fica muito mais limpo e leg√≠vel. Agora ele n√£o tem mais a responsabilidade de gerenciar as informa√ß√µes do Context:

import React from 'react';
import ThemeProvider from './context/ThemeProvider';
import Header from './components/Header';
import Footer from './components/Footer';
import Image from './components/Image';
import './style.css';

export default function App() {
  return (
    <ThemeProvider>
      <Header />
      <Image />
      <Footer />
    </ThemeProvider>
  );
}
