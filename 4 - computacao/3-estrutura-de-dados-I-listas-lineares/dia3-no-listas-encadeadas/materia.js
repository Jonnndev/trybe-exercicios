========================================== NÃ“ E LISTAS ENCADEADAS ========================================== 

--> Os NÃ³s (Chamados em inglÃªs de Nodes) sÃ£o um Tipo Abstrato de Dados. O nÃ³ Ã© pequeno, elementar e, quando
utilizado sozinho, nÃ£o possui muita utilidade, mas Ã© com ele que vÃ¡rios outros TADs muito poderosos sÃ£o construÃ­dos.
Um deles Ã© a lista encadeada!

--> As listas encadeadas (em inglÃªs chamadas LinkedLists) oferecem algumas vantagens importantes sobre outras
estruturas de dados lineares. Ao contrÃ¡rio dos arrays, as LinkedLists sÃ£o uma estrutura de dados dinÃ¢mica,
redimensionÃ¡vel em tempo de execuÃ§Ã£o. AlÃ©m disso, as operaÃ§Ãµes de inserÃ§Ã£o e exclusÃ£o sÃ£o eficientes e facilmente
implementadas.

========================================== NÃ“ ========================================== 

--> Um nÃ³ Ã© um elemento bÃ¡sico de uma LinkedList. Cada nÃ³ armazena um DADO e uma REFERÃŠNCIA para o prÃ³ximo nÃ³ da
lista. A LinkedList mantÃ©m uma referÃªncia para o primeiro e Ãºltimo nÃ³ da lista.

========================================== LISTA ENCADEADA ========================================== 

--> Uma LinkedList Ã© uma coleÃ§Ã£o de nÃ³s, cada um com uma referÃªncia para o prÃ³ximo nÃ³ da lista. A LinkedList
mantÃ©m uma referÃªncia para o primeiro e Ãºltimo nÃ³ da lista.

--> A LinkedList Ã© uma estrutura de dados dinÃ¢mica, redimensionÃ¡vel em tempo de execuÃ§Ã£o. Isso significa que
vocÃª pode adicionar e remover elementos da lista conforme necessÃ¡rio. A LinkedList tambÃ©m Ã© uma estrutura de
dados linear, o que significa que os elementos sÃ£o organizados em uma ordem linear e podem ser percorridos em
uma direÃ§Ã£o.

1 - Ã‰ uma estrutura de dados encadeada, o que significa que os elementos nÃ£o sÃ£o armazenados em
uma localizaÃ§Ã£o contÃ­gua na memÃ³ria e os elementos sÃ£o vinculados uns aos outros usando ponteiros.

2 - Ã‰ uma estrutura de dados ordenada, o que significa que os elementos sÃ£o organizados em uma
ordem linear e podem ser percorridos em uma direÃ§Ã£o.

(!) LinkedLists nÃ£o tem as restriÃ§Ãµes de acesso como nas seguintes TADs:

- FILA: Acessar apenas o primeiro elemento;

- PILHA: Acessar apenas o Ãºltimo elemento;

- DEQUE: Acessar apenas as extremidades - Deque.

========================================== OPERAÃ‡Ã•ES COMUNS ========================================== 

* A operaÃ§Ã£o insert_first nos permite adicionar um Node no inÃ­cio da lista; Complexidade: O(1)

* A operaÃ§Ã£o insert_last nos permite adicionar um Node no final da lista; Complexidade: O(n)

* A operaÃ§Ã£o insert_at nos permite adicionar um Node em qualquer posiÃ§Ã£o da lista; Complexidade: O(n)

* A operaÃ§Ã£o remove_first nos permite remover um Node do inÃ­cio da lista; Complexidade: O(1)

* A operaÃ§Ã£o remove_last nos permite remover um Node do final da lista; Complexidade: O(n)

* A operaÃ§Ã£o remove_at nos permite remover um Node em qualquer posiÃ§Ã£o da lista; Complexidade: O(n)

* A operaÃ§Ã£o clear nos permite remover todos os Nodes da lista; Complexidade: O(n)

* A operaÃ§Ã£o get_element_at nos permite visualizar o Node em qualquer posiÃ§Ã£o da lista; Complexidade: O(n)

* A operaÃ§Ã£o is_empty nos permite identificar se existe ao menos um Node na lista. Complexidade: O(1)

========================================== ENCADEAMENTO DUPLO ========================================== 

--> O encadeamento duplo Ã© uma tÃ©cnica que permite que cada nÃ³ da lista encadeada tenha duas referÃªncias, uma
para o prÃ³ximo nÃ³ e outra para o nÃ³ anterior.

--> O encadeamento duplo permite que vocÃª percorra a lista em ambas as direÃ§Ãµes, mas o custo Ã© o dobro do
espaÃ§o de armazenamento.

========================================== IMPLEMENTAÃ‡ÃƒO DE UM NODE ========================================== 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Class Node:
    def __init__(self, value):
        self.value = value  // ðŸŽ² Dado a ser armazenado
        self.next = None  // ðŸ‘‰ Forma de apontar para outro nÃ³

    def __str__(self):
        return f"Node(value={self.value}, next={self.next})"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

========================================== IMPLEMENTAÃ‡ÃƒO DE UMA LINKEDLIST ========================================== 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from node Import Node


Class LinkedList:
    def __init__(self):
        self.head_value = None
        self.__length = 0

    def __str__(self):
        return f"LinkedList(len={self.__length}, value={self.head_value})"

    def __len__(self):
        return self.__length

    // INSERIR NO INICIO
    def insert_first(self, value):
      first_value = Node(value)
      first_value.next = self.head_value
      self.head_value = first_value
      self.__length += 1

    // INSERIR NO FINAL
    def insert_last(self, value):
      last_value = Node(value)
      current_value = self.head_value

      if self.is_empty():
          return self.insert_first(value)

      while current_value.next:
          current_value = current_value.next

      current_value.next = last_value
      self.__length += 1

    // INSERIR QUALQUER POSIÃ‡ÃƒO
    def insert_at(self, value, position):
      if position < 1:
          return self.insert_first(value)

      if position >= len(self):
          return self.insert_last(value)

      current_value = self.head_value

      while position > 1:
          current_value = current_value.next
          position -= 1

      next_value = Node(value)
      next_value.next = current_value.next
      current_value.next = next_value
      self.__length += 1

    // REMOVER NO INICIO
    def remove_first(self):
      value_to_be_removed = self.head_value

      if value_to_be_removed:
          self.head_value = self.head_value.next
          value_to_be_removed.next = None
          self.__length -= 1

      return value_to_be_removed

    // REMOVER NO FINAL
    def remove_last(self):

      if len(self) <= 1:
          return self.remove_first()

      previous_to_be_removed = self.head_value

      while previous_to_be_removed.next.next:
          previous_to_be_removed = previous_to_be_removed.next

      value_to_be_removed = previous_to_be_removed.next
      previous_to_be_removed.next = None
      self.__length -= 1

      return value_to_be_removed

    // REMOVER QUALQUER POSIÃ‡ÃƒO
    def remove_at(self, position):
        if position < 1:
            return self.remove_first()

        if position >= len(self):
            return self.remove_last()

        previous_to_be_removed = self.head_value

        while position > 1:
            previous_to_be_removed = previous_to_be_removed.next
            position -= 1

        value_to_be_removed = previous_to_be_removed.next
        previous_to_be_removed.next = value_to_be_removed.next
        value_to_be_removed.next = None
        self.__length -= 1

        return value_to_be_removed

    // OBTER QUALQUER ELEMENTO
      // Caso nÃ£o haja elementos em nossa estrutura serÃ¡ retornado None;
      // Caso a posiÃ§Ã£o seja menor igual a 0, serÃ¡ retornado o primeiro elemento;
      // Caso a posiÃ§Ã£o seja maior igual a N, onde N Ã© o tamanho da lista, serÃ¡ retornado o Ãºltimo elemento.
    def get_element_at(self, position):

      value_returned = None
      value_to_be_returned = self.head_value

      if value_to_be_returned:
          while position > 0 and value_to_be_returned.next:
              value_to_be_returned = value_to_be_returned.next
              position -= 1

          if value_to_be_returned:
              value_returned = Node(value_to_be_returned.value)

      return value_returned

    // LISTA VAZIA
    def is_empty(self):
      return not self.__length
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~